generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String?
  email       String       @unique
  password    String?
  firebaseUid String?      @unique
  image       String?
  role        Role         @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  verified    Boolean      @default(false)
  waitlist    Waitlist[]
  testResults TestResult[]
  createdTests Test[] @relation("TestCreator")
  chatMessages ChatMessage[]
  portfolio   Portfolio?
  jobApplications JobApplication[]

  // Freelance relations
  clientProjects Project[] @relation("ClientProjects")
  freelancerProposals ProjectProposal[] @relation("FreelancerProposals")
  freelancerOrders ProjectOrder[] @relation("FreelancerOrders")
  clientOrders ProjectOrder[] @relation("ClientOrders")
}

model Waitlist {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  createdAt DateTime @default(now())
}

model Job {
  id          String   @id @default(uuid())
  title       String
  company     String
  description String?
  location    String?
  salary      String?
  type        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Job applications
  applications JobApplication[]
}

model JobApplication {
  id           String   @id @default(uuid())
  userId       String
  jobId        String
  coverLetter  String?
  status       String   @default("Applied") // Applied, Interview, Rejected, Accepted
  appliedAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId]) // Bir user bir job'ga faqat bir marta apply qila oladi
}

// Freelance Projects (Upwork kabi)
model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  category    String   // Web Development, Mobile App, Design, etc.
  budget      String   // Fixed price yoki hourly rate
  budgetType  String   @default("fixed") // fixed, hourly
  skills      String[] // Required skills
  duration    String?  // Project duration
  clientId    String   // Project yaratgan client
  status      String   @default("open") // open, in_progress, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client      User     @relation("ClientProjects", fields: [clientId], references: [id], onDelete: Cascade)
  proposals   ProjectProposal[]
  orders      ProjectOrder[]
}

model ProjectProposal {
  id          String   @id @default(uuid())
  projectId   String
  freelancerId String
  coverLetter String
  proposedBudget String
  deliveryTime String   // "3 days", "1 week", etc.
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer  User     @relation("FreelancerProposals", fields: [freelancerId], references: [id], onDelete: Cascade)

  @@unique([projectId, freelancerId]) // Bir freelancer bir project'ga faqat bir marta proposal beradi
}

model ProjectOrder {
  id          String   @id @default(uuid())
  projectId   String
  freelancerId String
  clientId    String
  title       String
  description String
  budget      String
  status      String   @default("active") // active, delivered, completed, cancelled, disputed
  startDate   DateTime @default(now())
  deliveryDate DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer  User     @relation("FreelancerOrders", fields: [freelancerId], references: [id], onDelete: Cascade)
  client      User     @relation("ClientOrders", fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([projectId, freelancerId]) // Bir project'da bir freelancer bilan faqat bitta order
}

// Test tizimi uchun modellar
model Test {
  id          String       @id @default(uuid())
  title       String
  description String?
  timeLimit   Int          @default(30) // daqiqalarda
  isActive    Boolean      @default(true)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   TestQuestion[]
  userResults TestResult[]
  creator     User         @relation("TestCreator", fields: [createdBy], references: [id])
}

model TestQuestion {
  id       String      @id @default(uuid())
  question String
  type     String      @default("multiple_choice") // multiple_choice, true_false, text
  order    Int
  testId   String
  test     Test        @relation(fields: [testId], references: [id], onDelete: Cascade)
  options  TestOption[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model TestOption {
  id         String       @id @default(uuid())
  text       String
  isCorrect  Boolean      @default(false)
  order      Int
  questionId String
  question   TestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model TestResult {
  id          String   @id @default(uuid())
  userId      String
  testId      String
  score       Int      // foizda (0-100)
  timeSpent   Int      // daqiqalarda
  answers     Json     // savollarga javoblar
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// Portfolio tizimi uchun model
model Portfolio {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  title                   String?
  bio                     String?
  phone                   String?
  website                 String?
  location                String?
  github_url              String?
  linkedin_url            String?
  twitter_url             String?
  telegram                String?
  technical_skills        String?
  soft_skills             String?
  experience_company      String?
  experience_position     String?
  experience_duration     String?
  experience_location     String?
  experience_description  String?
  education_institution   String?
  education_degree        String?
  education_duration      String?
  education_gpa           String?
  project_name            String?
  project_technologies    String?
  project_url             String?
  project_description     String?
  language_1              String?
  language_2              String?
  language_3              String?
  profile_image           String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Chat tizimi uchun modellar
model ChatMessage {
  id        String   @id @default(uuid())
  message   String
  userId    String
  groupId   String   @default("general")
  replyToId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo   ChatMessage? @relation("MessageReply", fields: [replyToId], references: [id])
  replies   ChatMessage[] @relation("MessageReply")
}